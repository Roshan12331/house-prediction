# -*- coding: utf-8 -*-
"""house_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-O1qNO0dxIFuVGfR6biWRF4UZxrjACC0
"""

import pandas as pd
import seaborn as sn
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
train=pd.read_csv('train.csv')
train

train1=train.select_dtypes(include = ['float64', 'int64'])
train1.isnull().sum()
column=train1.columns
print(train1.shape)
train1.isnull().sum()

from sklearn.impute import SimpleImputer
si=SimpleImputer(strategy='mean')
train1=si.fit_transform(train1)
train1=pd.DataFrame(train1,columns=column)
print(train1.shape)
train1.isnull().sum()

#Eda method to select features
cor=train1.corr()
plt.figure(figsize=(10,10))
cor_w='SalePrice'
orc=cor[[cor_w]]
sn.heatmap(orc,annot=True)
plt.show()

# filter method
from sklearn.feature_selection import mutual_info_regression
from sklearn.feature_selection import RFE
x=train1.drop('SalePrice',axis=1)
y=train1['SalePrice']
mi = mutual_info_regression(x, y)
mi_scores = pd.Series(mi, index=x.columns).sort_values(ascending=False)

# wrapper method
from sklearn.ensemble import RandomForestRegressor
model=RandomForestRegressor()
ref=RFE(estimator=model,n_features_to_select=10)
ref.fit(x,y)
rfe_features = x.columns[ref.support_]
print("Selected features by RFE:", rfe_features)
mi_column=mi_scores.index[:10]
mi_column=list(mi_column)

# embedded method
from sklearn.linear_model import LassoCV, RidgeCV, ElasticNetCV ,LinearRegression
from sklearn.model_selection import cross_val_score
import xgboost as xgb
lasso=LassoCV(cv=5)
lasso.fit(x,y)
lasso_feature=x.columns[lasso.coef_ !=0]
lasso_feature

elastic=ElasticNetCV(cv=5)
elastic.fit(x,y)
elastic_feature=x.columns[elastic.coef_ !=0]

xgboost=xgb.XGBRegressor()
xgboost.fit(x,y)
feature=xgboost.feature_importances_
xg=pd.Series(feature,index=x.columns).sort_values(ascending=False)
xg_feature=xg.index[:10]
xg_feature
final_feature=set(mi_column) | set(rfe_features) | set(lasso_feature) | set(elastic_feature) | set(xg_feature)
len(final_feature)

print(len(mi_column))
print(len(rfe_features))
print(len(lasso_feature))
print(len(elastic_feature))
print(len(xg_feature))

od=[]
for column in final_feature:
  tr=pd.DataFrame(train[[column]],columns=[column])
  od.append(tr)
odd=pd.concat(od,axis=1)
odd['SalePrice']=train['SalePrice']
odd

from sklearn.preprocessing import StandardScaler
scale=StandardScaler()
oddf=scale.fit_transform(odd)
f_train=pd.DataFrame(oddf,columns=odd.columns)
column=f_train.columns
f_train.drop("Id",axis=1,inplace=True)
f_column=f_train.columns
f_train=si.fit_transform(f_train)
f_train=pd.DataFrame(f_train,columns=f_column)
f_train.isnull().sum()

test=pd.read_csv('test.csv')
tf=[]
for i in column[:-1]:
  e=pd.DataFrame(test[i],columns=[i])
  tf.append(e)
odt=pd.concat(tf,axis=1)
odt['Id']=test['Id']
odt_column=odt.columns
odt=si.fit_transform(odt)
odt=pd.DataFrame(odt,columns=odt_column)
odt.isnull().sum()

from sklearn.ensemble import RandomForestRegressor
x_train=f_train.drop('SalePrice',axis=1)
y_train=f_train['SalePrice']
x_test=odt.drop('Id',axis=1)
model=RandomForestRegressor(n_estimators=30,random_state=3)
model.fit(x_train,y_train)
y_pred=model.predict(x_test)
acc=round(model.score(x_train,y_train)*100,2)
acc

submission = pd.DataFrame({
        "Id":odt["Id"],
        "SalePrice":y_pred
    })
submission
submission['Id'] = submission['Id'].astype('Int32')
submission['SalePrice']=submission['SalePrice'].astype(int)

submission.to_csv('submission.csv', index=False)
from google.colab import files
files.download('submission.csv')

print(submission.dtypes)